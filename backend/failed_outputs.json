[
  {
    "item": {
      "title": "Array Pair Sum Target",
      "description": "Given an array of integers and a target value, determine if there are two numbers in the array that sum to the target. Return true if such a pair exists, false otherwise.",
      "difficulty": "Easy",
      "tags": [
        "array",
        "search",
        "two pointers"
      ],
      "sampleInput": {
        "arr": [
          1,
          2,
          3,
          4,
          5
        ],
        "target": 7
      },
      "sampleOutput": true,
      "testCases": [
        {
          "input": {
            "arr": [
              1,
              2,
              3,
              4,
              5
            ],
            "target": 7
          },
          "output": true,
          "score": 10,
          "explanation": "2 + 5 = 7",
          "visible": true
        },
        {
          "input": {
            "arr": [
              1,
              2,
              3,
              4,
              5
            ],
            "target": 1
          },
          "output": "",
          "score": 10,
          "explanation": "No pair sums to 1",
          "visible": false
        },
        {
          "input": {
            "arr": [
              5,
              10,
              15,
              20,
              25
            ],
            "target": 45
          },
          "output": true,
          "score": 10,
          "explanation": "20 + 25 = 45",
          "visible": false
        },
        {
          "input": {
            "arr": [
              1,
              1,
              1,
              1,
              1
            ],
            "target": 2
          },
          "output": true,
          "score": 10,
          "explanation": "1 + 1 = 2",
          "visible": false
        }
      ],
      "timeLimit": 1,
      "memoryLimit": 64,
      "maxCodeSize": 1,
      "timeAllowed": 10,
      "maxAttempts": 3
    },
    "errors": [
      {
        "instancePath": "/sampleInput",
        "schemaPath": "#/properties/sampleInput/type",
        "keyword": "type",
        "params": {
          "type": "string"
        },
        "message": "must be string"
      },
      {
        "instancePath": "/sampleOutput",
        "schemaPath": "#/properties/sampleOutput/type",
        "keyword": "type",
        "params": {
          "type": "string"
        },
        "message": "must be string"
      },
      {
        "instancePath": "/testCases/0/input",
        "schemaPath": "#/properties/testCases/items/properties/input/type",
        "keyword": "type",
        "params": {
          "type": "string"
        },
        "message": "must be string"
      },
      {
        "instancePath": "/testCases/0/output",
        "schemaPath": "#/properties/testCases/items/properties/output/type",
        "keyword": "type",
        "params": {
          "type": "string"
        },
        "message": "must be string"
      },
      {
        "instancePath": "/testCases/1/input",
        "schemaPath": "#/properties/testCases/items/properties/input/type",
        "keyword": "type",
        "params": {
          "type": "string"
        },
        "message": "must be string"
      },
      {
        "instancePath": "/testCases/2/input",
        "schemaPath": "#/properties/testCases/items/properties/input/type",
        "keyword": "type",
        "params": {
          "type": "string"
        },
        "message": "must be string"
      },
      {
        "instancePath": "/testCases/2/output",
        "schemaPath": "#/properties/testCases/items/properties/output/type",
        "keyword": "type",
        "params": {
          "type": "string"
        },
        "message": "must be string"
      },
      {
        "instancePath": "/testCases/3/input",
        "schemaPath": "#/properties/testCases/items/properties/input/type",
        "keyword": "type",
        "params": {
          "type": "string"
        },
        "message": "must be string"
      },
      {
        "instancePath": "/testCases/3/output",
        "schemaPath": "#/properties/testCases/items/properties/output/type",
        "keyword": "type",
        "params": {
          "type": "string"
        },
        "message": "must be string"
      }
    ]
  },
  {
    "item": {
      "title": "String Anagram Grouping",
      "description": "Given a list of strings, group the anagrams together. Anagrams are strings that contain the same characters but in a different order. Return a list of lists, where each inner list contains anagrams.",
      "difficulty": "Medium",
      "tags": [
        "string",
        "hash table",
        "anagram"
      ],
      "sampleInput": [
        "eat",
        "tea",
        "tan",
        "ate",
        "nat",
        "bat"
      ],
      "sampleOutput": [
        [
          "eat",
          "tea",
          "ate"
        ],
        [
          "tan",
          "nat"
        ],
        [
          "bat"
        ]
      ],
      "testCases": [
        {
          "input": [
            "eat",
            "tea",
            "tan",
            "ate",
            "nat",
            "bat"
          ],
          "output": [
            [
              "eat",
              "tea",
              "ate"
            ],
            [
              "tan",
              "nat"
            ],
            [
              "bat"
            ]
          ],
          "score": 20,
          "explanation": "Group anagrams together.",
          "visible": true
        },
        {
          "input": [
            "listen",
            "silent"
          ],
          "output": [
            [
              "listen",
              "silent"
            ]
          ],
          "score": 20,
          "explanation": "Anagrams.",
          "visible": false
        },
        {
          "input": [
            "dog",
            "god",
            "odg"
          ],
          "output": [
            [
              "dog",
              "god",
              "odg"
            ]
          ],
          "score": 20,
          "explanation": "All three are anagrams.",
          "visible": false
        },
        {
          "input": [
            "a",
            "b",
            "c"
          ],
          "output": [
            [
              "a"
            ],
            [
              "b"
            ],
            [
              "c"
            ]
          ],
          "score": 20,
          "explanation": "No anagrams.",
          "visible": false
        }
      ],
      "timeLimit": 2,
      "memoryLimit": 128,
      "maxCodeSize": 2,
      "timeAllowed": 20,
      "maxAttempts": 3
    },
    "errors": [
      {
        "instancePath": "/sampleInput",
        "schemaPath": "#/properties/sampleInput/type",
        "keyword": "type",
        "params": {
          "type": "string"
        },
        "message": "must be string"
      },
      {
        "instancePath": "/sampleOutput",
        "schemaPath": "#/properties/sampleOutput/type",
        "keyword": "type",
        "params": {
          "type": "string"
        },
        "message": "must be string"
      },
      {
        "instancePath": "/testCases/0/input",
        "schemaPath": "#/properties/testCases/items/properties/input/type",
        "keyword": "type",
        "params": {
          "type": "string"
        },
        "message": "must be string"
      },
      {
        "instancePath": "/testCases/0/output",
        "schemaPath": "#/properties/testCases/items/properties/output/type",
        "keyword": "type",
        "params": {
          "type": "string"
        },
        "message": "must be string"
      },
      {
        "instancePath": "/testCases/1/input",
        "schemaPath": "#/properties/testCases/items/properties/input/type",
        "keyword": "type",
        "params": {
          "type": "string"
        },
        "message": "must be string"
      },
      {
        "instancePath": "/testCases/1/output",
        "schemaPath": "#/properties/testCases/items/properties/output/type",
        "keyword": "type",
        "params": {
          "type": "string"
        },
        "message": "must be string"
      },
      {
        "instancePath": "/testCases/2/input",
        "schemaPath": "#/properties/testCases/items/properties/input/type",
        "keyword": "type",
        "params": {
          "type": "string"
        },
        "message": "must be string"
      },
      {
        "instancePath": "/testCases/2/output",
        "schemaPath": "#/properties/testCases/items/properties/output/type",
        "keyword": "type",
        "params": {
          "type": "string"
        },
        "message": "must be string"
      },
      {
        "instancePath": "/testCases/3/input",
        "schemaPath": "#/properties/testCases/items/properties/input/type",
        "keyword": "type",
        "params": {
          "type": "string"
        },
        "message": "must be string"
      },
      {
        "instancePath": "/testCases/3/output",
        "schemaPath": "#/properties/testCases/items/properties/output/type",
        "keyword": "type",
        "params": {
          "type": "string"
        },
        "message": "must be string"
      }
    ]
  },
  {
    "item": {
      "title": "Longest Increasing Subsequence",
      "description": "Given an unsorted array of integers, find the length of the longest increasing subsequence. For example, given [10, 9, 2, 5, 3, 7, 101, 18], the longest increasing subsequence is [2, 3, 7, 101], therefore the length is 4.",
      "difficulty": "Hard",
      "tags": [
        "dynamic programming",
        "array",
        "binary search"
      ],
      "sampleInput": [
        10,
        9,
        2,
        5,
        3,
        7,
        101,
        18
      ],
      "sampleOutput": 4,
      "testCases": [
        {
          "input": [
            10,
            9,
            2,
            5,
            3,
            7,
            101,
            18
          ],
          "output": 4,
          "score": 30,
          "explanation": "Longest increasing subsequence: [2, 3, 7, 18/101]",
          "visible": true
        },
        {
          "input": [
            0,
            1,
            0,
            3,
            2,
            3
          ],
          "output": 4,
          "score": 30,
          "explanation": "Longest increasing subsequence: [0, 1, 2, 3]",
          "visible": false
        },
        {
          "input": [
            1,
            3,
            6,
            7,
            9,
            4,
            10,
            5,
            6
          ],
          "output": 6,
          "score": 30,
          "explanation": "Longest increasing subsequence: [1, 3, 6, 7, 9, 10]",
          "visible": false
        },
        {
          "input": [
            10,
            22,
            9,
            33,
            21,
            50,
            41,
            60,
            80
          ],
          "output": 6,
          "score": 30,
          "explanation": "One possible LIS is [10, 22, 33, 50, 60, 80].",
          "visible": false
        },
        {
          "input": [
            4,
            10,
            4,
            3,
            8,
            9
          ],
          "output": 3,
          "score": 30,
          "explanation": "One possible LIS is [4,8,9].",
          "visible": false
        }
      ],
      "timeLimit": 3,
      "memoryLimit": 256,
      "maxCodeSize": 4,
      "timeAllowed": 30,
      "maxAttempts": 3
    },
    "errors": [
      {
        "instancePath": "/sampleInput",
        "schemaPath": "#/properties/sampleInput/type",
        "keyword": "type",
        "params": {
          "type": "string"
        },
        "message": "must be string"
      },
      {
        "instancePath": "/sampleOutput",
        "schemaPath": "#/properties/sampleOutput/type",
        "keyword": "type",
        "params": {
          "type": "string"
        },
        "message": "must be string"
      },
      {
        "instancePath": "/testCases/0/input",
        "schemaPath": "#/properties/testCases/items/properties/input/type",
        "keyword": "type",
        "params": {
          "type": "string"
        },
        "message": "must be string"
      },
      {
        "instancePath": "/testCases/0/output",
        "schemaPath": "#/properties/testCases/items/properties/output/type",
        "keyword": "type",
        "params": {
          "type": "string"
        },
        "message": "must be string"
      },
      {
        "instancePath": "/testCases/1/input",
        "schemaPath": "#/properties/testCases/items/properties/input/type",
        "keyword": "type",
        "params": {
          "type": "string"
        },
        "message": "must be string"
      },
      {
        "instancePath": "/testCases/1/output",
        "schemaPath": "#/properties/testCases/items/properties/output/type",
        "keyword": "type",
        "params": {
          "type": "string"
        },
        "message": "must be string"
      },
      {
        "instancePath": "/testCases/2/input",
        "schemaPath": "#/properties/testCases/items/properties/input/type",
        "keyword": "type",
        "params": {
          "type": "string"
        },
        "message": "must be string"
      },
      {
        "instancePath": "/testCases/2/output",
        "schemaPath": "#/properties/testCases/items/properties/output/type",
        "keyword": "type",
        "params": {
          "type": "string"
        },
        "message": "must be string"
      },
      {
        "instancePath": "/testCases/3/input",
        "schemaPath": "#/properties/testCases/items/properties/input/type",
        "keyword": "type",
        "params": {
          "type": "string"
        },
        "message": "must be string"
      },
      {
        "instancePath": "/testCases/3/output",
        "schemaPath": "#/properties/testCases/items/properties/output/type",
        "keyword": "type",
        "params": {
          "type": "string"
        },
        "message": "must be string"
      },
      {
        "instancePath": "/testCases/4/input",
        "schemaPath": "#/properties/testCases/items/properties/input/type",
        "keyword": "type",
        "params": {
          "type": "string"
        },
        "message": "must be string"
      },
      {
        "instancePath": "/testCases/4/output",
        "schemaPath": "#/properties/testCases/items/properties/output/type",
        "keyword": "type",
        "params": {
          "type": "string"
        },
        "message": "must be string"
      }
    ]
  }
]